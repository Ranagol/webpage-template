# below we select the Docker version that we want to use
version: '3.8'
services:

# this is our app, this is the app service
  my-app:
    # here we build our an image from the Dockerfile
    build:
      # our app is in the same dir as this docker compose file, that is why we use .
      context: .
      # the path our custom dockerfile, that has to be runned for the app by docker-compose
      dockerfile: docker/Dockerfile
    hostname: webpage-template
    domainname: webpage-template.com

    # this is the image that we have created above from the .docker/Dockerfile
    image: webpage-template
    # exposing our app to make it publicable reachable
    ports:
      # so our app will run here: http://127.0.0.1:8088/ through docker
      # left side: outside docker (:8088)
      # right side: inside docker (:80)
      # we are redirecting all requests from laptop localhost:8088 to docker:80
      - 8088:80
    volumes:
      # this is the extension that has to be added to require_once paths (/srv/www)
      # we are connecting, linking (and not copying) the current dir (note the '.') with the /srv/www
      - .:/srv/www
    links:
      # this webpage-template image links to db container service...
      - my-database-service
    environment:
      # problem: I need dynamically to pull in these enviroment variables somehow
      # solution: https://stackoverflow.com/questions/29377853/how-to-use-environment-variables-in-docker-compose

      DB_HOST: my-database-service
      # all ${} variables are imported from the .env file
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PORT: ${DB_PORT}
      DB_PASSWORD: ${DB_PASSWORD}
  
  # DB SETUP
  # so, we can connect Heidi too. See 'Connecting docker....png' for details.
  my-database-service:
    # the container_name is a random name
    container_name: my-database-container
    image: mysql
    #  restarts the service whenever any defined configuration changes.
    restart: always
    environment:
        # problem: I need dynamically to pull in these enviroment variables somehow
        # solution: https://stackoverflow.com/questions/29377853/how-to-use-environment-variables-in-docker-compose

        # below is the admin user password, needed to enter into phpmyadmin. The username is root.
        MYSQL_ROOT_PASSWORD: MYSQL_ROOT_PASSWORD
        # below is the db name, taken from the .env file
        MYSQL_DATABASE: ${DB_DATABASE}
        # below is the app username, taken from the .env file
        MYSQL_USER: ${DB_USERNAME}
        # below is the app password, taken from the .env file
        MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
        # 13306 is the port where Heidi can access this db. Inside docker the 3306 port works.
        - "13306:3306"
    volumes:
        #
      - dbdata:/var/lib/mysql
  
  # PHPMYADMIN SETUP
  # username for the admin: root
  # password for the admin: whatever is in the db/enviroment/MYSQL_ROOT_PASSWORD, which is ... MYSQL_ROOT_PASSWORD
  # username for the app: MYSQL_USER, aka see what is in the .env ${DB_USERNAME}
  # password for the app: MYSQL_PASSWORD, aka see what is in the .env ${DB_PASSWORD}
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      # so, the phpadmin will be available to us on localhost:8080
      - '8080:80'
    restart: always
    environment:
      PMA_HOST: my-database-service
    depends_on:
      - my-database-service

# Volumes, on the other hand, are physical areas of disk space shared between the host and a container, 
# or even between containers. In other words, a volume is a shared directory in the host, visible from 
# some or all containers.
volumes:
  # this is on the local pc hard drive, called dbdata, and our my-database-service saves all db data here
  dbdata:
    # here we say that the driver is on the local pc hard
    driver: "local"
# we did not create the networks part, since we do not need it. The docker-compose makes one automatically.